(function() {
  var AutoComplete, fs, helpers, os, path, uuid;

  fs = require('fs-plus');

  path = require('path');

  os = require('os');

  uuid = require('node-uuid');

  helpers = require('./spec-helper');

  AutoComplete = require('../lib/autocomplete');

  describe("autocomplete functionality", function() {
    beforeEach(function() {
      this.autoComplete = new AutoComplete(['taba', 'tabb', 'tabc']);
      this.testDir = path.join(os.tmpdir(), "atom-ex-mode-spec-" + (uuid.v4()));
      this.nonExistentTestDir = path.join(os.tmpdir(), "atom-ex-mode-spec-" + (uuid.v4()));
      this.testFile1 = path.join(this.testDir, "atom-ex-testfile-a.txt");
      this.testFile2 = path.join(this.testDir, "atom-ex-testfile-b.txt");
      return runs((function(_this) {
        return function() {
          fs.makeTreeSync(_this.testDir);
          fs.closeSync(fs.openSync(_this.testFile1, 'w'));
          fs.closeSync(fs.openSync(_this.testFile2, 'w'));
          spyOn(_this.autoComplete, 'resetCompletion').andCallThrough();
          spyOn(_this.autoComplete, 'getFilePathCompletion').andCallThrough();
          return spyOn(_this.autoComplete, 'getCommandCompletion').andCallThrough();
        };
      })(this));
    });
    afterEach(function() {
      return fs.removeSync(this.testDir);
    });
    describe("autocomplete commands", function() {
      beforeEach(function() {
        return this.completed = this.autoComplete.getAutocomplete('tab');
      });
      it("returns taba", function() {
        return expect(this.completed).toEqual('taba');
      });
      return it("calls command function", function() {
        return expect(this.autoComplete.getCommandCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete commands, then autoComplete again", function() {
      beforeEach(function() {
        this.completed = this.autoComplete.getAutocomplete('tab');
        return this.completed = this.autoComplete.getAutocomplete('tab');
      });
      it("returns tabb", function() {
        return expect(this.completed).toEqual('tabb');
      });
      return it("calls command function", function() {
        return expect(this.autoComplete.getCommandCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete directory", function() {
      beforeEach(function() {
        var filePath;
        filePath = path.join(os.tmpdir(), 'atom-ex-mode-spec-');
        return this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
      });
      it("returns testDir", function() {
        var expected;
        expected = 'tabe ' + this.testDir + path.sep;
        return expect(this.completed).toEqual(expected);
      });
      return it("clears autocomplete", function() {
        return expect(this.autoComplete.resetCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete directory, then autocomplete again", function() {
      beforeEach(function() {
        var filePath;
        filePath = path.join(os.tmpdir(), 'atom-ex-mode-spec-');
        this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
        return this.completed = this.autoComplete.getAutocomplete(this.completed);
      });
      it("returns test file 1", function() {
        return expect(this.completed).toEqual('tabe ' + this.testFile1);
      });
      return it("lists files twice", function() {
        return expect(this.autoComplete.getFilePathCompletion.callCount).toBe(2);
      });
    });
    describe("autocomplete full directory, then autocomplete again", function() {
      beforeEach(function() {
        var filePath;
        filePath = path.join(this.testDir, 'a');
        this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
        return this.completed = this.autoComplete.getAutocomplete(this.completed);
      });
      it("returns test file 2", function() {
        return expect(this.completed).toEqual('tabe ' + this.testFile2);
      });
      return it("lists files once", function() {
        return expect(this.autoComplete.getFilePathCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete non existent directory", function() {
      beforeEach(function() {
        return this.completed = this.autoComplete.getAutocomplete('tabe ' + this.nonExistentTestDir);
      });
      return it("returns no completions", function() {
        var expected;
        expected = '';
        return expect(this.completed).toEqual(expected);
      });
    });
    return describe("autocomplete existing file as directory", function() {
      beforeEach(function() {
        var filePath;
        filePath = this.testFile1 + path.sep;
        return this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
      });
      return it("returns no completions", function() {
        var expected;
        expected = '';
        return expect(this.completed).toEqual(expected);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvaHB1Ly5hdG9tL3BhY2thZ2VzL2V4LW1vZGUvc3BlYy9hdXRvY29tcGxldGUtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsU0FBUjs7RUFDTCxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0VBQ1AsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSOztFQUNMLElBQUEsR0FBTyxPQUFBLENBQVEsV0FBUjs7RUFFUCxPQUFBLEdBQVUsT0FBQSxDQUFRLGVBQVI7O0VBQ1YsWUFBQSxHQUFlLE9BQUEsQ0FBUSxxQkFBUjs7RUFFZixRQUFBLENBQVMsNEJBQVQsRUFBdUMsU0FBQTtJQUNyQyxVQUFBLENBQVcsU0FBQTtNQUNULElBQUMsQ0FBQSxZQUFELEdBQWdCLElBQUksWUFBSixDQUFpQixDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLE1BQWpCLENBQWpCO01BQ2hCLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBSSxDQUFDLElBQUwsQ0FBVSxFQUFFLENBQUMsTUFBSCxDQUFBLENBQVYsRUFBdUIsb0JBQUEsR0FBb0IsQ0FBQyxJQUFJLENBQUMsRUFBTCxDQUFBLENBQUQsQ0FBM0M7TUFDWCxJQUFDLENBQUEsa0JBQUQsR0FBc0IsSUFBSSxDQUFDLElBQUwsQ0FBVSxFQUFFLENBQUMsTUFBSCxDQUFBLENBQVYsRUFBdUIsb0JBQUEsR0FBb0IsQ0FBQyxJQUFJLENBQUMsRUFBTCxDQUFBLENBQUQsQ0FBM0M7TUFDdEIsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxPQUFYLEVBQW9CLHdCQUFwQjtNQUNiLElBQUMsQ0FBQSxTQUFELEdBQWEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFDLENBQUEsT0FBWCxFQUFvQix3QkFBcEI7YUFFYixJQUFBLENBQUssQ0FBQSxTQUFBLEtB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ZXF1aXJlICdmcy1wbHVzJ1xucGF0aCA9IHJlcXVpcmUgJ3BhdGgnXG5vcyA9IHJlcXVpcmUgJ29zJ1xudXVpZCA9IHJlcXVpcmUgJ25vZGUtdXVpZCdcblxuaGVscGVycyA9IHJlcXVpcmUgJy4vc3BlYy1oZWxwZXInXG5BdXRvQ29tcGxldGUgPSByZXF1aXJlICcuLi9saWIvYXV0b2NvbXBsZXRlJ1xuXG5kZXNjcmliZSBcImF1dG9jb21wbGV0ZSBmdW5jdGlvbmFsaXR5XCIsIC0+XG4gIGJlZm9yZUVhY2ggLT5cbiAgICBAYXV0b0NvbXBsZXRlID0gbmV3IEF1dG9Db21wbGV0ZShbJ3RhYmEnLCAndGFiYicsICd0YWJjJ10pXG4gICAgQHRlc3REaXIgPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksIFwiYXRvbS1leC1tb2RlLXNwZWMtI3t1dWlkLnY0KCl9XCIpXG4gICAgQG5vbkV4aXN0ZW50VGVzdERpciA9IHBhdGguam9pbihvcy50bXBkaXIoKSwgXCJhdG9tLWV4LW1vZGUtc3BlYy0je3V1aWQudjQoKX1cIilcbiAgICBAdGVzdEZpbGUxID0gcGF0aC5qb2luKEB0ZXN0RGlyLCBcImF0b20tZXgtdGVzdGZpbGUtYS50eHRcIilcbiAgICBAdGVzdEZpbGUyID0gcGF0aC5qb2luKEB0ZXN0RGlyLCBcImF0b20tZXgtdGVzdGZpbGUtYi50eHRcIilcblxuICAgIHJ1bnMgPT5cbiAgICAgIGZzLm1ha2VUcmVlU3luYyhAdGVzdERpcilcbiAgICAgIGZzLmNsb3NlU3luYyhmcy5vcGVuU3luYyhAdGVzdEZpbGUxLCAndycpKTtcbiAgICAgIGZzLmNsb3NlU3luYyhmcy5vcGVuU3luYyhAdGVzdEZpbGUyLCAndycpKTtcbiAgICAgIHNweU9uKEBhdXRvQ29tcGxldGUsICdyZXNldENvbXBsZXRpb24nKS5hbmRDYWxsVGhyb3VnaCgpXG4gICAgICBzcHlPbihAYXV0b0NvbXBsZXRlLCAnZ2V0RmlsZVBhdGhDb21wbGV0aW9uJykuYW5kQ2FsbFRocm91Z2goKVxuICAgICAgc3B5T24oQGF1dG9Db21wbGV0ZSwgJ2dldENvbW1hbmRDb21wbGV0aW9uJykuYW5kQ2FsbFRocm91Z2goKVxuXG4gIGFmdGVyRWFjaCAtPlxuICAgIGZzLnJlbW92ZVN5bmMoQHRlc3REaXIpXG5cbiAgZGVzY3JpYmUgXCJhdXRvY29tcGxldGUgY29tbWFuZHNcIiwgLT5cbiAgICBiZWZvcmVFYWNoIC0+XG4gICAgICBAY29tcGxldGVkID0gQGF1dG9Db21wbGV0ZS5nZXRBdXRvY29tcGxldGUoJ3RhYicpXG5cbiAgICBpdCBcInJldHVybnMgdGFiYVwiLCAtPlxuICAgICAgZXhwZWN0KEBjb21wbGV0ZWQpLnRvRXF1YWwoJ3RhYmEnKVxuXG4gICAgaXQgXCJjYWxscyBjb21tYW5kIGZ1bmN0aW9uXCIsIC0+XG4gICAgICBleHBlY3QoQGF1dG9Db21wbGV0ZS5nZXRDb21tYW5kQ29tcGxldGlvbi5jYWxsQ291bnQpLnRvQmUoMSlcblxuICBkZXNjcmliZSBcImF1dG9jb21wbGV0ZSBjb21tYW5kcywgdGhlbiBhdXRvQ29tcGxldGUgYWdhaW5cIiwgLT5cbiAgICBiZWZvcmVFYWNoIC0+XG4gICAgICBAY29tcGxldGVkID0gQGF1dG9Db21wbGV0ZS5nZXRBdXRvY29tcGxldGUoJ3RhYicpXG4gICAgICBAY29tcGxldGVkID0gQGF1dG9Db21wbGV0ZS5nZXRBdXRvY29tcGxldGUoJ3RhYicpXG5cbiAgICBpdCBcInJldHVybnMgdGFiYlwiLCAtPlxuICAgICAgZXhwZWN0KEBjb21wbGV0ZWQpLnRvRXF1YWwoJ3RhYmInKVxuXG4gICAgaXQgXCJjYWxscyBjb21tYW5kIGZ1bmN0aW9uXCIsIC0+XG4gICAgICBleHBlY3QoQGF1dG9Db21wbGV0ZS5nZXRDb21tYW5kQ29tcGxldGlvbi5jYWxsQ291bnQpLnRvQmUoMSlcblxuICBkZXNjcmliZSBcImF1dG9jb21wbGV0ZSBkaXJlY3RvcnlcIiwgLT5cbiAgICBiZWZvcmVFYWNoIC0+XG4gICAgICBmaWxlUGF0aCA9IHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2F0b20tZXgtbW9kZS1zcGVjLScpXG4gICAgICBAY29tcGxldGVkID0gQGF1dG9Db21wbGV0ZS5nZXRBdXRvY29tcGxldGUoJ3RhYmUgJyArIGZpbGVQYXRoKVxuXG4gICAgaXQgXCJyZXR1cm5zIHRlc3REaXJcIiwgLT5cbiAgICAgIGV4cGVjdGVkID0gJ3RhYmUgJyArIEB0ZXN0RGlyICsgcGF0aC5zZXBcbiAgICAgIGV4cGVjdChAY29tcGxldGVkKS50b0VxdWFsKGV4cGVjdGVkKVxuXG4gICAgaXQgXCJjbGVhcnMgYXV0b2NvbXBsZXRlXCIsIC0+XG4gICAgICBleHBlY3QoQGF1dG9Db21wbGV0ZS5yZXNldENvbXBsZXRpb24uY2FsbENvdW50KS50b0JlKDEpXG5cbiAgZGVzY3JpYmUgXCJhdXRvY29tcGxldGUgZGlyZWN0b3J5LCB0aGVuIGF1dG9jb21wbGV0ZSBhZ2FpblwiLCAtPlxuICAgIGJlZm9yZUVhY2ggLT5cbiAgICAgIGZpbGVQYXRoID0gcGF0aC5qb2luKG9zLnRtcGRpcigpLCAnYXRvbS1leC1tb2RlLXNwZWMtJylcbiAgICAgIEBjb21wbGV0ZWQgPSBAYXV0b0NvbXBsZXRlLmdldEF1dG9jb21wbGV0ZSgndGFiZSAnICsgZmlsZVBhdGgpXG4gICAgICBAY29tcGxldGVkID0gQGF1dG9Db21wbGV0ZS5nZXRBdXRvY29tcGxldGUoQGNvbXBsZXRlZClcblxuICAgIGl0IFwicmV0dXJucyB0ZXN0IGZpbGUgMVwiLCAtPlxuICAgICAgZXhwZWN0KEBjb21wbGV0ZWQpLnRvRXF1YWwoJ3RhYmUgJyArIEB0ZXN0RmlsZTEpXG5cbiAgICBpdCBcImxpc3RzIGZpbGVzIHR3aWNlXCIsIC0+XG4gICAgICBleHBlY3QoQGF1dG9Db21wbGV0ZS5nZXRGaWxlUGF0aENvbXBsZXRpb24uY2FsbENvdW50KS50b0JlKDIpXG5cbiAgZGVzY3JpYmUgXCJhdXRvY29tcGxldGUgZnVsbCBkaXJlY3RvcnksIHRoZW4gYXV0b2NvbXBsZXRlIGFnYWluXCIsIC0+XG4gICAgYmVmb3JlRWFjaCAtPlxuICAgICAgZmlsZVBhdGggPSBwYXRoLmpvaW4oQHRlc3REaXIsICdhJylcbiAgICAgIEBjb21wbGV0ZWQgPSBAYXV0b0NvbXBsZXRlLmdldEF1dG9jb21wbGV0ZSgndGFiZSAnICsgZmlsZVBhdGgpXG4gICAgICBAY29tcGxldGVkID0gQGF1dG9Db21wbGV0ZS5nZXRBdXRvY29tcGxldGUoQGNvbXBsZXRlZClcblxuICAgIGl0IFwicmV0dXJucyB0ZXN0IGZpbGUgMlwiLCAtPlxuICAgICAgZXhwZWN0KEBjb21wbGV0ZWQpLnRvRXF1YWwoJ3RhYmUgJyArIEB0ZXN0RmlsZTIpXG5cbiAgICBpdCBcImxpc3RzIGZpbGVzIG9uY2VcIiwgLT5cbiAgICAgIGV4cGVjdChAYXV0b0NvbXBsZXRlLmdldEZpbGVQYXRoQ29tcGxldGlvbi5jYWxsQ291bnQpLnRvQmUoMSlcblxuICBkZXNjcmliZSBcImF1dG9jb21wbGV0ZSBub24gZXhpc3RlbnQgZGlyZWN0b3J5XCIsIC0+XG4gICAgYmVmb3JlRWFjaCAtPlxuICAgICAgQGNvbXBsZXRlZCA9IEBhdXRvQ29tcGxldGUuZ2V0QXV0b2NvbXBsZXRlKCd0YWJlICcgKyBAbm9uRXhpc3RlbnRUZXN0RGlyKVxuXG4gICAgaXQgXCJyZXR1cm5zIG5vIGNvbXBsZXRpb25zXCIsIC0+XG4gICAgICBleHBlY3RlZCA9ICcnO1xuICAgICAgZXhwZWN0KEBjb21wbGV0ZWQpLnRvRXF1YWwoZXhwZWN0ZWQpXG5cbiAgZGVzY3JpYmUgXCJhdXRvY29tcGxldGUgZXhpc3RpbmcgZmlsZSBhcyBkaXJlY3RvcnlcIiwgLT5cbiAgICBiZWZvcmVFYWNoIC0+XG4gICAgICBmaWxlUGF0aCA9IEB0ZXN0RmlsZTEgKyBwYXRoLnNlcFxuICAgICAgQGNvbXBsZXRlZCA9IEBhdXRvQ29tcGxldGUuZ2V0QXV0b2NvbXBsZXRlKCd0YWJlICcgKyBmaWxlUGF0aClcblxuICAgIGl0IFwicmV0dXJucyBubyBjb21wbGV0aW9uc1wiLCAtPlxuICAgICAgZXhwZWN0ZWQgPSAnJztcbiAgICAgIGV4cGVjdChAY29tcGxldGVkKS50b0VxdWFsKGV4cGVjdGVkKVxuIl19
